// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: classic_conf.proto

#ifndef PROTOBUF_INCLUDED_classic_5fconf_2eproto
#define PROTOBUF_INCLUDED_classic_5fconf_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_classic_5fconf_2eproto 

namespace protobuf_classic_5fconf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_classic_5fconf_2eproto
namespace apollo {
namespace cyber {
namespace proto {
class ClassicConf;
class ClassicConfDefaultTypeInternal;
extern ClassicConfDefaultTypeInternal _ClassicConf_default_instance_;
class ClassicTask;
class ClassicTaskDefaultTypeInternal;
extern ClassicTaskDefaultTypeInternal _ClassicTask_default_instance_;
class SchedGroup;
class SchedGroupDefaultTypeInternal;
extern SchedGroupDefaultTypeInternal _SchedGroup_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::cyber::proto::ClassicConf* Arena::CreateMaybeMessage<::apollo::cyber::proto::ClassicConf>(Arena*);
template<> ::apollo::cyber::proto::ClassicTask* Arena::CreateMaybeMessage<::apollo::cyber::proto::ClassicTask>(Arena*);
template<> ::apollo::cyber::proto::SchedGroup* Arena::CreateMaybeMessage<::apollo::cyber::proto::SchedGroup>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class ClassicTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ClassicTask) */ {
 public:
  ClassicTask();
  virtual ~ClassicTask();

  ClassicTask(const ClassicTask& from);

  inline ClassicTask& operator=(const ClassicTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassicTask(ClassicTask&& from) noexcept
    : ClassicTask() {
    *this = ::std::move(from);
  }

  inline ClassicTask& operator=(ClassicTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassicTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassicTask* internal_default_instance() {
    return reinterpret_cast<const ClassicTask*>(
               &_ClassicTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClassicTask* other);
  friend void swap(ClassicTask& a, ClassicTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassicTask* New() const final {
    return CreateMaybeMessage<ClassicTask>(NULL);
  }

  ClassicTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClassicTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClassicTask& from);
  void MergeFrom(const ClassicTask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassicTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string group_name = 3;
  bool has_group_name() const;
  void clear_group_name();
  static const int kGroupNameFieldNumber = 3;
  const ::std::string& group_name() const;
  void set_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_group_name(::std::string&& value);
  #endif
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  ::std::string* mutable_group_name();
  ::std::string* release_group_name();
  void set_allocated_group_name(::std::string* group_name);

  // optional uint32 prio = 2 [default = 1];
  bool has_prio() const;
  void clear_prio();
  static const int kPrioFieldNumber = 2;
  ::google::protobuf::uint32 prio() const;
  void set_prio(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ClassicTask)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_prio();
  void clear_has_prio();
  void set_has_group_name();
  void clear_has_group_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr group_name_;
  ::google::protobuf::uint32 prio_;
  friend struct ::protobuf_classic_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SchedGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SchedGroup) */ {
 public:
  SchedGroup();
  virtual ~SchedGroup();

  SchedGroup(const SchedGroup& from);

  inline SchedGroup& operator=(const SchedGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SchedGroup(SchedGroup&& from) noexcept
    : SchedGroup() {
    *this = ::std::move(from);
  }

  inline SchedGroup& operator=(SchedGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SchedGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SchedGroup* internal_default_instance() {
    return reinterpret_cast<const SchedGroup*>(
               &_SchedGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SchedGroup* other);
  friend void swap(SchedGroup& a, SchedGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SchedGroup* New() const final {
    return CreateMaybeMessage<SchedGroup>(NULL);
  }

  SchedGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SchedGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SchedGroup& from);
  void MergeFrom(const SchedGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchedGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.cyber.proto.ClassicTask tasks = 7;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 7;
  ::apollo::cyber::proto::ClassicTask* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ClassicTask >*
      mutable_tasks();
  const ::apollo::cyber::proto::ClassicTask& tasks(int index) const;
  ::apollo::cyber::proto::ClassicTask* add_tasks();
  const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ClassicTask >&
      tasks() const;

  // required string name = 1 [default = "default_grp"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string affinity = 3;
  bool has_affinity() const;
  void clear_affinity();
  static const int kAffinityFieldNumber = 3;
  const ::std::string& affinity() const;
  void set_affinity(const ::std::string& value);
  #if LANG_CXX11
  void set_affinity(::std::string&& value);
  #endif
  void set_affinity(const char* value);
  void set_affinity(const char* value, size_t size);
  ::std::string* mutable_affinity();
  ::std::string* release_affinity();
  void set_allocated_affinity(::std::string* affinity);

  // optional string cpuset = 4;
  bool has_cpuset() const;
  void clear_cpuset();
  static const int kCpusetFieldNumber = 4;
  const ::std::string& cpuset() const;
  void set_cpuset(const ::std::string& value);
  #if LANG_CXX11
  void set_cpuset(::std::string&& value);
  #endif
  void set_cpuset(const char* value);
  void set_cpuset(const char* value, size_t size);
  ::std::string* mutable_cpuset();
  ::std::string* release_cpuset();
  void set_allocated_cpuset(::std::string* cpuset);

  // optional string processor_policy = 5;
  bool has_processor_policy() const;
  void clear_processor_policy();
  static const int kProcessorPolicyFieldNumber = 5;
  const ::std::string& processor_policy() const;
  void set_processor_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_processor_policy(::std::string&& value);
  #endif
  void set_processor_policy(const char* value);
  void set_processor_policy(const char* value, size_t size);
  ::std::string* mutable_processor_policy();
  ::std::string* release_processor_policy();
  void set_allocated_processor_policy(::std::string* processor_policy);

  // optional uint32 processor_num = 2;
  bool has_processor_num() const;
  void clear_processor_num();
  static const int kProcessorNumFieldNumber = 2;
  ::google::protobuf::uint32 processor_num() const;
  void set_processor_num(::google::protobuf::uint32 value);

  // optional int32 processor_prio = 6 [default = 0];
  bool has_processor_prio() const;
  void clear_processor_prio();
  static const int kProcessorPrioFieldNumber = 6;
  ::google::protobuf::int32 processor_prio() const;
  void set_processor_prio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SchedGroup)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_processor_num();
  void clear_has_processor_num();
  void set_has_affinity();
  void clear_has_affinity();
  void set_has_cpuset();
  void clear_has_cpuset();
  void set_has_processor_policy();
  void clear_has_processor_policy();
  void set_has_processor_prio();
  void clear_has_processor_prio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ClassicTask > tasks_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_name_;
  private:
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr affinity_;
  ::google::protobuf::internal::ArenaStringPtr cpuset_;
  ::google::protobuf::internal::ArenaStringPtr processor_policy_;
  ::google::protobuf::uint32 processor_num_;
  ::google::protobuf::int32 processor_prio_;
  friend struct ::protobuf_classic_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClassicConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ClassicConf) */ {
 public:
  ClassicConf();
  virtual ~ClassicConf();

  ClassicConf(const ClassicConf& from);

  inline ClassicConf& operator=(const ClassicConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassicConf(ClassicConf&& from) noexcept
    : ClassicConf() {
    *this = ::std::move(from);
  }

  inline ClassicConf& operator=(ClassicConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassicConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassicConf* internal_default_instance() {
    return reinterpret_cast<const ClassicConf*>(
               &_ClassicConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClassicConf* other);
  friend void swap(ClassicConf& a, ClassicConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassicConf* New() const final {
    return CreateMaybeMessage<ClassicConf>(NULL);
  }

  ClassicConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClassicConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClassicConf& from);
  void MergeFrom(const ClassicConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassicConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.cyber.proto.SchedGroup groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  ::apollo::cyber::proto::SchedGroup* mutable_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SchedGroup >*
      mutable_groups();
  const ::apollo::cyber::proto::SchedGroup& groups(int index) const;
  ::apollo::cyber::proto::SchedGroup* add_groups();
  const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SchedGroup >&
      groups() const;

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ClassicConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SchedGroup > groups_;
  friend struct ::protobuf_classic_5fconf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClassicTask

// optional string name = 1;
inline bool ClassicTask::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassicTask::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassicTask::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassicTask::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ClassicTask::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ClassicTask.name)
  return name_.GetNoArena();
}
inline void ClassicTask::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ClassicTask.name)
}
#if LANG_CXX11
inline void ClassicTask::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ClassicTask.name)
}
#endif
inline void ClassicTask::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ClassicTask.name)
}
inline void ClassicTask::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ClassicTask.name)
}
inline ::std::string* ClassicTask::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ClassicTask.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClassicTask::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ClassicTask.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClassicTask::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ClassicTask.name)
}

// optional uint32 prio = 2 [default = 1];
inline bool ClassicTask::has_prio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClassicTask::set_has_prio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClassicTask::clear_has_prio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClassicTask::clear_prio() {
  prio_ = 1u;
  clear_has_prio();
}
inline ::google::protobuf::uint32 ClassicTask::prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ClassicTask.prio)
  return prio_;
}
inline void ClassicTask::set_prio(::google::protobuf::uint32 value) {
  set_has_prio();
  prio_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ClassicTask.prio)
}

// optional string group_name = 3;
inline bool ClassicTask::has_group_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassicTask::set_has_group_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassicTask::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassicTask::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_name();
}
inline const ::std::string& ClassicTask::group_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ClassicTask.group_name)
  return group_name_.GetNoArena();
}
inline void ClassicTask::set_group_name(const ::std::string& value) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ClassicTask.group_name)
}
#if LANG_CXX11
inline void ClassicTask::set_group_name(::std::string&& value) {
  set_has_group_name();
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ClassicTask.group_name)
}
#endif
inline void ClassicTask::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ClassicTask.group_name)
}
inline void ClassicTask::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ClassicTask.group_name)
}
inline ::std::string* ClassicTask::mutable_group_name() {
  set_has_group_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ClassicTask.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClassicTask::release_group_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ClassicTask.group_name)
  if (!has_group_name()) {
    return NULL;
  }
  clear_has_group_name();
  return group_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClassicTask::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    set_has_group_name();
  } else {
    clear_has_group_name();
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ClassicTask.group_name)
}

// -------------------------------------------------------------------

// SchedGroup

// required string name = 1 [default = "default_grp"];
inline bool SchedGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SchedGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SchedGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SchedGroup::clear_name() {
  name_.ClearToDefaultNoArena(&::apollo::cyber::proto::SchedGroup::_i_give_permission_to_break_this_code_default_name_.get());
  clear_has_name();
}
inline const ::std::string& SchedGroup::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.name)
  return name_.GetNoArena();
}
inline void SchedGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::apollo::cyber::proto::SchedGroup::_i_give_permission_to_break_this_code_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.name)
}
#if LANG_CXX11
inline void SchedGroup::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::apollo::cyber::proto::SchedGroup::_i_give_permission_to_break_this_code_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedGroup.name)
}
#endif
inline void SchedGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::apollo::cyber::proto::SchedGroup::_i_give_permission_to_break_this_code_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedGroup.name)
}
inline void SchedGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::apollo::cyber::proto::SchedGroup::_i_give_permission_to_break_this_code_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedGroup.name)
}
inline ::std::string* SchedGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedGroup.name)
  return name_.MutableNoArena(&::apollo::cyber::proto::SchedGroup::_i_give_permission_to_break_this_code_default_name_.get());
}
inline ::std::string* SchedGroup::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedGroup.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::apollo::cyber::proto::SchedGroup::_i_give_permission_to_break_this_code_default_name_.get());
}
inline void SchedGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::apollo::cyber::proto::SchedGroup::_i_give_permission_to_break_this_code_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedGroup.name)
}

// optional uint32 processor_num = 2;
inline bool SchedGroup::has_processor_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SchedGroup::set_has_processor_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SchedGroup::clear_has_processor_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SchedGroup::clear_processor_num() {
  processor_num_ = 0u;
  clear_has_processor_num();
}
inline ::google::protobuf::uint32 SchedGroup::processor_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.processor_num)
  return processor_num_;
}
inline void SchedGroup::set_processor_num(::google::protobuf::uint32 value) {
  set_has_processor_num();
  processor_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.processor_num)
}

// optional string affinity = 3;
inline bool SchedGroup::has_affinity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SchedGroup::set_has_affinity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SchedGroup::clear_has_affinity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SchedGroup::clear_affinity() {
  affinity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_affinity();
}
inline const ::std::string& SchedGroup::affinity() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.affinity)
  return affinity_.GetNoArena();
}
inline void SchedGroup::set_affinity(const ::std::string& value) {
  set_has_affinity();
  affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.affinity)
}
#if LANG_CXX11
inline void SchedGroup::set_affinity(::std::string&& value) {
  set_has_affinity();
  affinity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedGroup.affinity)
}
#endif
inline void SchedGroup::set_affinity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_affinity();
  affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedGroup.affinity)
}
inline void SchedGroup::set_affinity(const char* value, size_t size) {
  set_has_affinity();
  affinity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedGroup.affinity)
}
inline ::std::string* SchedGroup::mutable_affinity() {
  set_has_affinity();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedGroup.affinity)
  return affinity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SchedGroup::release_affinity() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedGroup.affinity)
  if (!has_affinity()) {
    return NULL;
  }
  clear_has_affinity();
  return affinity_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SchedGroup::set_allocated_affinity(::std::string* affinity) {
  if (affinity != NULL) {
    set_has_affinity();
  } else {
    clear_has_affinity();
  }
  affinity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), affinity);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedGroup.affinity)
}

// optional string cpuset = 4;
inline bool SchedGroup::has_cpuset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SchedGroup::set_has_cpuset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SchedGroup::clear_has_cpuset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SchedGroup::clear_cpuset() {
  cpuset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpuset();
}
inline const ::std::string& SchedGroup::cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.cpuset)
  return cpuset_.GetNoArena();
}
inline void SchedGroup::set_cpuset(const ::std::string& value) {
  set_has_cpuset();
  cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.cpuset)
}
#if LANG_CXX11
inline void SchedGroup::set_cpuset(::std::string&& value) {
  set_has_cpuset();
  cpuset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedGroup.cpuset)
}
#endif
inline void SchedGroup::set_cpuset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cpuset();
  cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedGroup.cpuset)
}
inline void SchedGroup::set_cpuset(const char* value, size_t size) {
  set_has_cpuset();
  cpuset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedGroup.cpuset)
}
inline ::std::string* SchedGroup::mutable_cpuset() {
  set_has_cpuset();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedGroup.cpuset)
  return cpuset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SchedGroup::release_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedGroup.cpuset)
  if (!has_cpuset()) {
    return NULL;
  }
  clear_has_cpuset();
  return cpuset_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SchedGroup::set_allocated_cpuset(::std::string* cpuset) {
  if (cpuset != NULL) {
    set_has_cpuset();
  } else {
    clear_has_cpuset();
  }
  cpuset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpuset);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedGroup.cpuset)
}

// optional string processor_policy = 5;
inline bool SchedGroup::has_processor_policy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SchedGroup::set_has_processor_policy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SchedGroup::clear_has_processor_policy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SchedGroup::clear_processor_policy() {
  processor_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_processor_policy();
}
inline const ::std::string& SchedGroup::processor_policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.processor_policy)
  return processor_policy_.GetNoArena();
}
inline void SchedGroup::set_processor_policy(const ::std::string& value) {
  set_has_processor_policy();
  processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.processor_policy)
}
#if LANG_CXX11
inline void SchedGroup::set_processor_policy(::std::string&& value) {
  set_has_processor_policy();
  processor_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedGroup.processor_policy)
}
#endif
inline void SchedGroup::set_processor_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_processor_policy();
  processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedGroup.processor_policy)
}
inline void SchedGroup::set_processor_policy(const char* value, size_t size) {
  set_has_processor_policy();
  processor_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedGroup.processor_policy)
}
inline ::std::string* SchedGroup::mutable_processor_policy() {
  set_has_processor_policy();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedGroup.processor_policy)
  return processor_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SchedGroup::release_processor_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedGroup.processor_policy)
  if (!has_processor_policy()) {
    return NULL;
  }
  clear_has_processor_policy();
  return processor_policy_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SchedGroup::set_allocated_processor_policy(::std::string* processor_policy) {
  if (processor_policy != NULL) {
    set_has_processor_policy();
  } else {
    clear_has_processor_policy();
  }
  processor_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processor_policy);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedGroup.processor_policy)
}

// optional int32 processor_prio = 6 [default = 0];
inline bool SchedGroup::has_processor_prio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SchedGroup::set_has_processor_prio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SchedGroup::clear_has_processor_prio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SchedGroup::clear_processor_prio() {
  processor_prio_ = 0;
  clear_has_processor_prio();
}
inline ::google::protobuf::int32 SchedGroup::processor_prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.processor_prio)
  return processor_prio_;
}
inline void SchedGroup::set_processor_prio(::google::protobuf::int32 value) {
  set_has_processor_prio();
  processor_prio_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.processor_prio)
}

// repeated .apollo.cyber.proto.ClassicTask tasks = 7;
inline int SchedGroup::tasks_size() const {
  return tasks_.size();
}
inline void SchedGroup::clear_tasks() {
  tasks_.Clear();
}
inline ::apollo::cyber::proto::ClassicTask* SchedGroup::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedGroup.tasks)
  return tasks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ClassicTask >*
SchedGroup::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.SchedGroup.tasks)
  return &tasks_;
}
inline const ::apollo::cyber::proto::ClassicTask& SchedGroup::tasks(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.tasks)
  return tasks_.Get(index);
}
inline ::apollo::cyber::proto::ClassicTask* SchedGroup::add_tasks() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.SchedGroup.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::ClassicTask >&
SchedGroup::tasks() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.SchedGroup.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// ClassicConf

// repeated .apollo.cyber.proto.SchedGroup groups = 1;
inline int ClassicConf::groups_size() const {
  return groups_.size();
}
inline void ClassicConf::clear_groups() {
  groups_.Clear();
}
inline ::apollo::cyber::proto::SchedGroup* ClassicConf::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ClassicConf.groups)
  return groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SchedGroup >*
ClassicConf::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.ClassicConf.groups)
  return &groups_;
}
inline const ::apollo::cyber::proto::SchedGroup& ClassicConf::groups(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ClassicConf.groups)
  return groups_.Get(index);
}
inline ::apollo::cyber::proto::SchedGroup* ClassicConf::add_groups() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.ClassicConf.groups)
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::cyber::proto::SchedGroup >&
ClassicConf::groups() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.ClassicConf.groups)
  return groups_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_classic_5fconf_2eproto
